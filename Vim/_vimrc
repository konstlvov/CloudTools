set nocompatible
source $VIMRUNTIME/vimrc_example.vim
source $VIM/mswin.vim
behave mswin

" klvov: мои настройки
set nobackup
set nowritebackup
set noswapfile
set nowrap
set nostartofline
set noundofile
set nofixeol
let $LANG='EN'
" Почему же я раньше не переключил enc на utf-8! После этого Vim стал понимать регистр русских букв
" (при поиске и в командах типа U, u)
set enc=utf-8
set fenc=utf-8
set fileencodings=utf-8,cp1251,ucs-bom,default,latin1
" каталог для swap-файлов
set directory=$TEMP
" start Vim in maximized window
au GUIEnter * simalt ~x
" установить keymap, чтобы по Ctrl+^ переключался на русский и обратно
set keymap=russian-jcukenwin
" по умолчанию - латинская раскладка
set iminsert=0
" по умолчанию - латинская раскладка при поиске
set imsearch=0
" игнорировать регистр при поиске
set ic
" подсвечивать поиск
set hls
" инкрементальный поиск
set is
" ширина текста
" set textwidth=76 " так отформатировано на lib.ru
set textwidth=100 " у нас в БСС решили пока так
" минимальная высота окна пусть будет 0 (по умолчанию - 1)
set winminheight=0
" установить шрифт Consolas
set guifont=consolas:h10:cRUSSIAN
set printfont=consolas:h10:cRUSSIAN
" настраиваю для работы с русскими словами (чтобы w, b, * понимали
" русские слова)
set iskeyword=@,48-57,_,192-255
" не надо показывать панель инструментов - толку от нее нет, а место
" занимает
set go-=T
" то же для меню
set go-=m
" не надо начинать поиск с начала документа, после того, как достигнут
" конец (и наоборот)
set nowrapscan
" выключить отображение колонки фолдинга по умолчанию
set foldcolumn=0
" автоматически перечитывать файл, если он был изменен в другом приложении
set autoread

"в визуальном режиме заменять выделение содержимым регистра "", не изменяя этого регистра
"таким образом, можно несколько раз вставить один и тот же текст.
vnoremap p "_dP

" klvov: по звездочке не прыгать на следующее найденное, а просто подсветить
" старая версия - все равно может прыгать по тексту и сбивать позицию
nnoremap * *N

" выключить подсветку
nnoremap ,z :noh<CR>

" в визуальном режиме по команде * подсвечивать выделение
vnoremap * y :execute ":let @/=@\""<CR> :execute "set hlsearch"<CR>

" переключать на другой буфер, даже если в текущем буфере есть несохраненные изменения
set hidden

"показывать только имена файлов в заголовках вкладок
set guitablabel=%t

" управление вкладками
nnoremap ,t :tabnew<CR>
nnoremap ,l :execute 'silent! tabmove +1'<CR>
nnoremap ,j :execute 'silent! tabmove -1'<CR>
nnoremap <silent> ,. :tabnext<CR>
nnoremap <silent> <C-Tab> :tabnext<CR>
nnoremap <silent> ,m :tabprevious<CR>
nnoremap <silent> <C-S-Tab> :tabprevious<CR>

function! LeaveBaseName() range
  pyfile $VIM\vimfiles\python\LeaveBaseName.py
endfunction

set tabstop=4
set shiftwidth=4
set noexpandtab

function! ReplaceBackslashesWithSlashes() range
  for i in range(a:firstline, a:lastline)
    let repl = substitute(getline(i), "\\", "\/", "g")
    call setline(i, repl)
  endfor
endfunction
vnoremap ,/ :call ReplaceBackslashesWithSlashes()<CR>

function! ToggleLineComment() range
  let ext = tolower(expand('%:e'))
  let filenameWithExt = expand('%:t')
  for i in range(a:firstline, a:lastline)
	let src = getline(i)
	let repl = src
	if ext == 'xml'
	  \|| ext == 'xsl'
	  \|| ext == 'xslt'
	  \|| ext == 'html'
	  \|| ext == 'jrxml'
		if match(src, '<!--') == 0
			let repl = substitute(repl, '^<!--', '', 'g')
			let repl = substitute(repl, '-->$', '', 'g')
		else
			let repl = '<!--' . repl . '-->'
		endif
	elseif ext == 'bls'
			\|| ext == 'js'
			\|| ext == 'ts'
			\|| ext == 'json'
			\|| ext == 'pas'
			\|| ext == 'cpp'
			\|| ext == 'c'
			\|| ext == 'java'
			\|| ext == 'groovy'
		if match(src, '//') == 0
			let repl = substitute(repl, '^//', '', 'g')
		else
			let repl = '//' . repl
		endif
	elseif ext == 'sql'
			\|| ext == 'hs'
		if match(src, '--') == 0
			let repl = substitute(repl, '^--', '', 'g')
		else
			let repl = '--' . repl
		endif
	elseif ext == 'cmd'
			\|| ext == 'bat'
		if match(src, 'rem ') == 0
			let repl = substitute(repl, '^rem ', '', 'g')
		else
			let repl = 'rem ' . repl
		endif
	elseif ext == 'vim'
				\|| filenameWithExt == '_vimrc'
				\|| filenameWithExt == '.vimrc'
		if match(src, '"') == 0
			let repl = substitute(repl, '^"', '', 'g')
		else
			let repl = '"' . repl
		endif
	else
		let repl = src
	endif
	if repl != src
      call setline(i, repl)
	endif
  endfor
endfunction
vnoremap ,, :call ToggleLineComment()<CR>

let pascal_delphi=1

function! Sql2Bls() range
  for i in range(a:firstline, a:lastline)
    " заменить одиночный апостроф на двойной
    let src = substitute(getline(i), "'", "''", "g")
    if i == a:firstline
      let repl = "  '" . src . " '"
    elseif i == a:lastline
      let repl = "+ '" . src . "';"
    else
      let repl = "+ '" . src . " '"
    endif
    call setline(i, repl)
  endfor
endfunction

function! Xml2CSharp() range
  for i in range(a:firstline, a:lastline)
    " эскейпить кавычки
    let src = substitute(getline(i), '"', '\\"', "g")
    if i == a:firstline
      let repl = '  "' . src . ' "'
    elseif i == a:lastline
      let repl = '+ "' . src . '";'
    else
      let repl = '+ "' . src . ' "'
    endif
    call setline(i, repl)
  endfor
endfunction

function! Bls2Sql() range
  for i in range(a:firstline, a:lastline)
    " заменить двойной апостроф на одиночный
    let src = substitute(getline(i), "''", "'", "g")
    if i == a:firstline
      let repl = substitute(src, "^\\s*'\\(.*\\) '$", "\\1", "g")
    elseif i == a:lastline
      let repl = substitute(src, "^\\s*+\\s\\+'\\(.*\\)';$", "\\1", "g")
    else
      let repl = substitute(src, "^\\s*+\\s\\+'\\(.*\\) '$", "\\1", "g")
    endif
    call setline(i, repl)
  endfor                               
endfunction

function! Strings2Delphi() range
  for i in range(a:firstline, a:lastline)
    let src = getline(i)
    " заменить одиночный апостроф на двойной
    let src = substitute(src, "'", "''", "g")
    if i == a:firstline
      let repl = "'" . src . "'+#13+#10"
    elseif i == a:lastline
      let repl = "+ '" . src . "'+#13+#10;"
    else
      let repl = "+ '" . src . "'+#13+#10"
    endif
    call setline(i, repl)
  endfor
endfunction

function! Strings2DelphiRevert() range
  for i in range(a:firstline, a:lastline)
    let src = getline(i)
    " заменить двойной апостроф на одиночный
    let src = substitute(src, "''", "'", "g")
    if i == a:firstline
      let repl = substitute(src, "^\\s*'\\(.*\\)'+#13+#10$", "\\1", "g")
    elseif i == a:lastline
      let repl = substitute(src, "^\\s*+\\s\\+'\\(.*\\)'+#13+#10;$", "\\1", "g")
    else
      let repl = substitute(src, "^\\s*+\\s\\+'\\(.*\\)'+#13+#10$", "\\1", "g")
    endif
    call setline(i, repl)
  endfor                               
endfunction

function! ToCamelCase() range
  for i in range(a:firstline, a:lastline)
    let src = getline(i) " line_like_this
    let repl = substitute(src, '_\(\l\)', '\u\1', 'g') " will become lineLikeThis
    call setline(i, repl)
  endfor                               
endfunction

function! ToUnderscoreCase() range
  for i in range(a:firstline, a:lastline)
	let src = getline(i) " LineLikeThis
    let repl = substitute(src, '\(\<\u\l\+\|\l\+\)\(\u\)', '\l\1_\l\2', 'g') " will become line_like_this
    call setline(i, repl)
  endfor                               
endfunction

function! MakeResponse() range
  for i in range(a:firstline, a:lastline)
	let src = getline(i)
	let repl = substitute(src, '&lt;\|&gt;\|&quot;\|&amp;', '', 'g')
	let repl = substitute(repl, '<', '\&lt;', 'g')
	let repl = substitute(repl, '>', '\&gt;', 'g')
    call setline(i, repl)
  endfor                               
endfunction

function! MakeLtGt() range
  for i in range(a:firstline, a:lastline)
	let repl = getline(i)
	let repl = substitute(repl, '&', '\&amp;', 'g')
	let repl = substitute(repl, '<', '\&lt;', 'g')
	let repl = substitute(repl, '\s\+\/>', '\/>', 'g')
	let repl = substitute(repl, '>', '\&gt;', 'g')
	let repl = substitute(repl, '^\s\+', '', 'g')
	let repl = substitute(repl, '\s\+$', '', 'g')
    call setline(i, repl)
  endfor                               
  for i in range(a:firstline, a:lastline)
		.join!
  endfor
endfunction

function! UnmakeLtGt() range
  for i in range(a:firstline, a:lastline)
	let repl = getline(i)
	let repl = substitute(repl, '&lt;', '<', 'g')
	let repl = substitute(repl, '&gt;', '>', 'g')
	let repl = substitute(repl, '&amp;amp;', '\&amp;', 'g')
	let repl = substitute(repl, '&amp;quot;', '\&quot;', 'g')
    call setline(i, repl)
  endfor
endfunction

vnoremap ,q :call Sql2Bls()<CR>
vnoremap ,Q :call Bls2Sql()<CR>
vnoremap ,d :call Strings2Delphi()<CR>
vnoremap ,D :call Strings2DelphiRevert()<CR>

" отформатировать XML: сработает только, когда fenc=cp1251 (было)
" vnoremap ,f :!tidy -q -i -xml -raw -w 5000<CR>

" Отформатировать XML: сработает только когда enc=utf-8 и fenc=utf-8 тоже
vnoremap ,f :!tidy -q -i -xml -utf8 -w 5000 \| iconv -f UTF-8 -t CP1251<CR>

" Отформатировать JSON: сработает только когда enc=utf-8 и fenc=utf-8 тоже
vnoremap ,j :! jq . \| iconv -f UTF-8 -t CP1251<CR>

" Поднять текущий файл в Explorer
function! Exup()
  execute 'silent !start explorer /select, '.shellescape(expand('%:p'), 1)
endfunction
nnoremap <M-e> :call Exup()<CR>

" Исполнить python'овский скрипт
function! ExecPython()
  execute 'silent update'
  execute "echo system('python.exe ".shellescape(expand('%:p'), 1)."')"
  " execute "echo system('python.exe ".shellescape(expand('%:p'), 1)." | iconv -f CP1251 -t UTF-8')"
endfunction
nnoremap <M-p> :call ExecPython()<CR>

function! ExecJS()
  execute 'silent update'
  let ffp = shellescape(expand('%:p'), 1) " file full path
  " with .js files this works:
  " execute "echo system('cscript.exe ".ffp." | iconv -f CP866 -t UTF-8')"
  execute "echo system('node.exe ".ffp." | iconv -f UTF-8 -t UTF-8')"
endfunction
nnoremap <M-j> :call ExecJS()<CR>

function! ExecHaskell()
  execute 'silent update'
  " execute "echo system('C:\\Users\\lvov_k\\CloudTools\\ghc-8.2.2\\bin\\runhaskell.exe ".shellescape(expand('%:p'), 1)."| iconv -f CP866 -t UTF-8')"
  let current_dir = shellescape(expand('%:p:h'))
  let file_full_path = shellescape(expand('%:p'), 1)
  echo "about to pass following string to runhugs.exe: ".file_full_path
  "execute "echo system('cd /D ".current_dir." && C:\\Users\\lvov_k\\WinHugs\\runhugs.exe ".file_full_path." | iconv -f CP866 -t UTF-8')"
  " please use UTF-8 for Haskell sources, so there is no need for iconv
  execute "redir @a"
  execute "echo system('cd /D ".current_dir." && C:\\Users\\lvov_k\\WinHugs\\runhugs.exe ".file_full_path."')"
  execute "redir END"
  normal! "ap
endfunction
nnoremap <M-h> :call ExecHaskell()<CR>

" ,y копирует полный путь к текущему файлу в буфер (было Alt-y, переделал на leader key для универсальности)
nnoremap ,y :let @*=expand("%:p")<CR>

"по F2 инвертировать значение опции 'wrap'
nnoremap <F2> :execute RotateWrap()<CR>
function! RotateWrap()
    let wrap_status = &wrap
    if wrap_status == 0
        echo "set wrap"
        return ":set wrap"
    else
        echo "set nowrap"
        return ":set nowrap"
    endif
endfunction

"по Ctrl-F2 инвертировать значение опции 'list'
nnoremap <C-F2> :execute RotateList()<CR>
function! RotateList()
    let list_status = &list
    if list_status == 0
        echo "set list"
        return ":set list"
    else
        echo "set nolist"
        return ":set nolist"
    endif
endfunction

" закрывать окно плагина TagList после выбота тэга
let Tlist_Close_On_Select = 1
" не показывать тэги для неактивных буферов
let Tlist_File_Fold_Auto_Close = 1
" переходить сразу в открытое окно плагина TagList
let Tlist_GainFocus_On_ToggleOpen = 1
" использовать компактный формат списка тэгов (?)
" let Tlist_Compact_Format = 1
" уширить окно со списком тэгов, чтобы помещались длинные имена
let Tlist_WinWidth = 50

" <F12> - Fuzzy finder plugin
map <F12> :FufBuffer<CR>
" <C-F12> - Fuzzy finder plugin (search for tags)
map <C-F12> :FufCoverageFile<CR>

" <F8> File encoding for open
" ucs-2le - MS Windows unicode encoding
map <F8>    :execute RotateEnc()<CR>
function! RotateEnc()
	if !exists("b:encindex")
	  let b:encindex = 0
	endif
  let y = -1
  while y == -1
    let encstring = "#utf-8#8bit-cp866#cp1251#ucs-2le#koi8-r#"
    let x = match(encstring,"#",b:encindex)
    let y = match(encstring,"#",x+1)
    let b:encindex = x+1
    if y == -1
      let b:encindex = 0
    else
      let str = strpart(encstring,x+1,y-x-1)
      silent execute ":e ++enc=".str
      echo "Screen encoding: " . &encoding . ", file encoding: " . &fileencoding . ". File opened with ++enc=" . str
    endif
  endwhile
endfunction

let javaScript_fold = 1

"unfortunately, need to specify colorscheme. Just writing "highlight Comment guifg=DarkGrey" does not work
colorscheme klvov

" Утянул с http://stackoverflow.com/questions/4503748/remove-everything-except-regex-match-in-vim
"" Remove all text except what matches the current search result. Will put each
"" match on its own line. This is the opposite of :%s///g (which clears all
"" instances of the current search).
function! ClearAllButMatches() range
    let is_whole_file = a:firstline == 1 && a:lastline == line('$')
    let old_c = @c
    let @c=""
    exec a:firstline .','. a:lastline .'sub//\=setreg("C", submatch(0), "l")/g'
    exec a:firstline .','. a:lastline .'delete _'
    put! c
    "" I actually want the above to replace the whole selection with c, but I'll
    "" settle for removing the blank line that's left when deleting the file
    "" contents.
    if is_whole_file
        $delete _
    endif
    let @c = old_c
endfunction

function! DeleteHiddenBuffers()
    redir => buffersoutput
    buffers
    redir END
    let buflist = split(buffersoutput,"\n")
    for item in filter(buflist,"v:val[5] == 'h'")
            exec 'bdelete ' . item[:2]
    endfor
endfunction

" Исполняет текущую строку, в ней должны использоваться двойные кавычки
nnoremap ,e :exec "echo system('".getline(".")."')"<CR>

" Исполняет текущую строку и пишет вывод в то место, где стоит курсор
nnoremap ,E :exec 'r!'.getline('.')<CR>

" Исполнить текущее выделение в shell
vnoremap ,e "xy:!<C-r>x<CR>

function! MakeSession()
  exe "mksession! ._Session.vim"
endfunction

function! LoadSession()
	exe "source ._Session.vim"
endfunction

au VimEnter * nested :call LoadSession()
au VimLeave * :call MakeSession()

" on Windows it's better to specify working dir in shortcut properties
" execute "cd C:\\Users\\lvov_k\\work"
set titlestring=%F%m\ %y\ %{&fileencoding}\ [0x%B]
